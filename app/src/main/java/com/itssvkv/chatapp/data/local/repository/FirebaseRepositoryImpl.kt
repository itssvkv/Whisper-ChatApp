package com.itssvkv.chatapp.data.local.repositoryimport android.util.Logimport com.google.firebase.Timestampimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.firestore.CollectionReferenceimport com.google.firebase.firestore.DocumentReferenceimport com.google.firebase.firestore.Filterimport com.google.firebase.firestore.FirebaseFirestoreimport com.google.firebase.firestore.Queryimport com.google.firebase.firestore.QuerySnapshotimport com.itssvkv.chatapp.utils.Common.TAGimport java.text.SimpleDateFormatimport javax.inject.Injectclass FirebaseRepositoryImpl@Inject constructor(    private val db: FirebaseFirestore,    private val auth: FirebaseAuth) : FirebaseRepository {    var data: QuerySnapshot? = null    override fun currentUserId() =        auth.uid    override suspend fun currentUserDetails() =        db.collection("friends").document(currentUserId()!!)    override suspend fun otherUserDetails(id: String?) =        db.collection("friends").document(id!!)    override suspend fun getAllUsersCollectionRef(searchText: String) =        db.collection("friends")            .where(                Filter.or(                    Filter.equalTo("name", searchText),                    Filter.equalTo("phone", "+2$searchText"),                    )            ).get()    override suspend fun getChatRoomReference(chatRoomId: String): DocumentReference {        return db.collection("chatrooms").document(chatRoomId)    }//    override suspend fun getChatRoomId(firstUserId: String, secondUserId: String): String {//        return if (firstUserId.hashCode() < secondUserId.hashCode()) {//            firstUserId + "_" + secondUserId//        } else {//            secondUserId + "_" + firstUserId//        }//    }    override suspend fun getChatRoomId(firstUserId: String, secondUserId: String): String {        val sortedUsersIds = listOf(firstUserId, secondUserId).sorted()        return sortedUsersIds.joinToString(separator = "_")    }    override suspend fun getChatRoomMessageReference(chatRoomId: String): CollectionReference {        return getChatRoomReference(chatRoomId).collection("chats")    }    override suspend fun getAllMessageOfTwoUsers(chatRoomId: String): Query {        return getChatRoomMessageReference(chatRoomId)            .orderBy("timestamp", Query.Direction.DESCENDING)    }    override suspend fun getAllChatRooms(): Query {        Log.d(TAG, "getAllChatRoomsRepo: ")        return db.collection("chatrooms")            .whereArrayContains("userIds", currentUserId()!!)            .orderBy("lastMessageTimestamp", Query.Direction.DESCENDING)    }    override fun getOtherUserFromChatRoom(userIds: List<String>): DocumentReference {        return if (userIds[0] == currentUserId()) {            db.collection("friends").document(userIds[1])        } else {            db.collection("friends").document(userIds[0])        }    }    override fun changeTimestampToString(timestamp: Timestamp?): String {        return SimpleDateFormat("HH:MM").format(timestamp!!.toDate())    }    override suspend fun createPostOnFirebase(postId: String?) =        db.collection("posts").document(postId!!)    override suspend fun getAllPostFromFirebase(): Query {        return db.collection("posts")            .orderBy("timestamp", Query.Direction.DESCENDING)    }    override suspend fun getAllPostForOneUser(id: String?): Query {        Log.d(TAG, "getAllPostForOneUser: Repo")        return db.collection("posts")//            .whereArrayContains("id", currentUserId()!!)            .whereEqualTo("userWhoCreateThePost.id" , id)//            .orderBy("userWhoCreateThePost.${currentUserId()}")    }    override suspend fun getOnePostForLikes(postId: String?): DocumentReference {        return db.collection("posts")            .document(postId!!)    }}