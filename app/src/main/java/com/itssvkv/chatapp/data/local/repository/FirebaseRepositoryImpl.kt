package com.itssvkv.chatapp.data.local.repositoryimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.firestore.CollectionReferenceimport com.google.firebase.firestore.DocumentReferenceimport com.google.firebase.firestore.Filterimport com.google.firebase.firestore.FirebaseFirestoreimport com.google.firebase.firestore.Queryimport com.google.firebase.firestore.QuerySnapshotimport javax.inject.Injectclass FirebaseRepositoryImpl@Inject constructor(    private val db: FirebaseFirestore,    private val auth: FirebaseAuth) : FirebaseRepository {    var data: QuerySnapshot? = null    override  fun currentUserId() =        auth.uid    override suspend fun currentUserDetails() =        db.collection("friends").document(currentUserId()!!)    override suspend fun getAllUsersCollectionRef(searchText: String) =        db.collection("friends")            .where(                Filter.or(                    Filter.equalTo("name", searchText),                    Filter.equalTo("phone", "+2$searchText"),                    )            ).get()    override suspend fun getChatRoomReference(chatRoomId: String): DocumentReference {        return db.collection("chatrooms").document(chatRoomId)    }    override suspend fun getChatRoomId(firstUserId: String, secondUserId: String): String {        return if (firstUserId.hashCode() < secondUserId.hashCode()) {            firstUserId + "_" + secondUserId        } else {            secondUserId + "_" + firstUserId        }    }    override suspend fun getChatRoomMessageReference(chatRoomId: String): CollectionReference {        return getChatRoomReference(chatRoomId).collection("chats")    }    override suspend fun getAllMessageOfTwoUsers(chatRoomId: String):Query {        return getChatRoomMessageReference(chatRoomId)            .orderBy("timestamp", Query.Direction.DESCENDING)    }}