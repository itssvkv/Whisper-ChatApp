package com.itssvkv.chatapp.ui.home.postsimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.itssvkv.chatapp.data.local.repository.FirebaseRepositoryimport com.itssvkv.chatapp.models.Postsimport com.itssvkv.chatapp.models.UserDataInfoimport com.itssvkv.chatapp.utils.Common.TAGimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass PostsViewModel @Inject constructor(    private val firebaseRepository: FirebaseRepository) : ViewModel() {    private val _allPostsLiveData = MutableLiveData<MutableList<Posts>>()    val allPostsLiveData: LiveData<MutableList<Posts>>        get() = _allPostsLiveData    private val _currentUserDataInfoLiveData = MutableLiveData<UserDataInfo>()    val currentUserDataInfoLiveData: LiveData<UserDataInfo>        get() = _currentUserDataInfoLiveData    var makeToast: ((TOASTS) -> Unit)? = null    private val _onePostLiveData = MutableLiveData<MutableList<Posts>>()    val onePostLiveData: LiveData<MutableList<Posts>>        get() = _onePostLiveData    private var _likesList = mutableListOf<UserDataInfo?>()    init {        getAllPostFromFirebase()        getCurrentUserDataInfoFromFirestore()    }    private fun getAllPostFromFirebase() {        viewModelScope.launch {            firebaseRepository.getAllPostFromFirebase().addSnapshotListener { value, _ ->                _allPostsLiveData.postValue(value?.toObjects(Posts::class.java))            }        }    }    private fun getCurrentUserDataInfoFromFirestore() {        viewModelScope.launch {            firebaseRepository.currentUserDetails().get().addOnSuccessListener {                Log.d(TAG, "getCurrentUserDataInfoFromFirestore: $it")                _currentUserDataInfoLiveData.postValue(                    it.toObject(UserDataInfo::class.java)                )                Log.d(TAG, "getCurrentUserDataInfoFromFirestore: ${_currentUserDataInfoLiveData.value}")                _likesList.add(it.toObject(UserDataInfo::class.java))                Log.d(TAG, "getCurrentUserDataInfoFromFirestore: $_likesList")            }        }    }    fun whenLikeIconClicked(posts: Posts) {        val newPosts = posts.copy(likes = _likesList)        viewModelScope.launch {            firebaseRepository.getOnePostForLikes(posts.postId).set(newPosts).addOnSuccessListener {                makeToast?.invoke(TOASTS.SUCCESS)            }.addOnFailureListener {                makeToast?.invoke(TOASTS.FAILURE)            }        }    }    enum class TOASTS {        SUCCESS,        FAILURE    }}