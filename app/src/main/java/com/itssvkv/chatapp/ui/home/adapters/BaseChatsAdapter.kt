package com.itssvkv.chatapp.ui.home.adaptersimport android.annotation.SuppressLintimport android.util.Logimport android.view.LayoutInflaterimport android.view.ViewGroupimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.ListAdapterimport androidx.recyclerview.widget.RecyclerViewimport com.bumptech.glide.Glideimport com.itssvkv.chatapp.databinding.SearchResultRecyclerBindingimport com.itssvkv.chatapp.models.UserDataInfoimport com.itssvkv.chatapp.utils.Common.TAGclass BaseChatsAdapter(    private val currentUserId: String) :    ListAdapter<UserDataInfo, BaseChatsAdapter.UserModelViewHolder>(Comparator) {    var onUserClickListener: ((UserDataInfo) -> Unit)? = null    inner class UserModelViewHolder(private val binding: SearchResultRecyclerBinding) :        RecyclerView.ViewHolder(binding.root) {        @SuppressLint("SetTextI18n")        fun bind(item: UserDataInfo) {            Log.d(TAG, "bind: ${item.userId + currentUserId}")            if (item.userId == currentUserId) {                binding.usernameTv.text = item.name + "(me)"            } else {                binding.usernameTv.text = item.name            }            binding.userPhoneTv.text = item.phone            Glide.with(binding.userPhotoIv.context).load(item.profilePhoto)                .into(binding.userPhotoIv)        }    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): UserModelViewHolder {        val binding =            SearchResultRecyclerBinding.inflate(LayoutInflater.from(parent.context), parent, false)        return UserModelViewHolder(binding)    }    override fun onBindViewHolder(holder: UserModelViewHolder, position: Int) {        val item = getItem(position)        item.let { userInfo ->            holder.bind(item = userInfo)            holder.itemView.setOnClickListener {                onUserClickListener?.invoke(item)            }        }    }    private object Comparator : DiffUtil.ItemCallback<UserDataInfo>() {        override fun areItemsTheSame(oldItem: UserDataInfo, newItem: UserDataInfo) =            oldItem.name == newItem.name        override fun areContentsTheSame(oldItem: UserDataInfo, newItem: UserDataInfo) =            oldItem == newItem    }}