package com.itssvkv.chatapp.ui.home.adaptersimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.RecyclerViewimport com.bumptech.glide.Glideimport com.bumptech.glide.request.RequestOptionsimport com.itssvkv.chatapp.databinding.PostsRecyclerBindingimport com.itssvkv.chatapp.models.Postsclass PostsAdapter :    androidx.recyclerview.widget.ListAdapter<Posts, PostsAdapter.PostsViewHolder>(Comparator) {    inner class PostsViewHolder(val binding: PostsRecyclerBinding) :        RecyclerView.ViewHolder(binding.root) {        fun bind(posts: Posts) {            if (posts.postPhoto != "null") {                binding.postsLayoutWithOutPhoto.visibility = View.GONE                binding.postsLayoutWithPhoto.visibility = View.VISIBLE                binding.currentUserNameWithPhoto.text = posts.userWhoCreateThePost?.name                Glide.with(binding.currentUserIvWithPhoto.context)                    .load(posts.userWhoCreateThePost?.profilePhoto)                    .into(binding.currentUserIvWithPhoto)                binding.postCaptionWithPhoto.text = posts.caption                Glide.with(binding.postPhoto.context)                    .load(posts.postPhoto)                    .apply(                        RequestOptions()                            .dontTransform()                    )                    .into(binding.postPhoto)            } else {                binding.postsLayoutWithPhoto.visibility = View.GONE                binding.postsLayoutWithOutPhoto.visibility = View.VISIBLE                binding.currentUserName.text = posts.userWhoCreateThePost?.name                Glide.with(binding.currentUserIv.context)                    .load(posts.userWhoCreateThePost?.profilePhoto)                    .into(binding.currentUserIv)                binding.postCaption.text = posts.caption            }        }    }    private object Comparator : DiffUtil.ItemCallback<Posts>() {        override fun areItemsTheSame(oldItem: Posts, newItem: Posts): Boolean {            return oldItem.postId == newItem.postId        }        override fun areContentsTheSame(oldItem: Posts, newItem: Posts): Boolean {            return oldItem == newItem        }    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PostsViewHolder {        val binding =            PostsRecyclerBinding.inflate(LayoutInflater.from(parent.context), parent, false)        return PostsViewHolder(binding)    }    override fun onBindViewHolder(holder: PostsViewHolder, position: Int) {        val onePost = getItem(position)        onePost?.let { posts ->            holder.bind(posts = posts)        }    }}