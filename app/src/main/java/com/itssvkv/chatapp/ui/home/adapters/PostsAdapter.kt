package com.itssvkv.chatapp.ui.home.adaptersimport android.content.Contextimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.RecyclerViewimport com.bumptech.glide.Glideimport com.bumptech.glide.request.RequestOptionsimport com.itssvkv.chatapp.Rimport com.itssvkv.chatapp.databinding.PostsRecyclerBindingimport com.itssvkv.chatapp.models.Postsimport com.itssvkv.chatapp.models.UserDataInfoimport com.itssvkv.chatapp.utils.Common.TAGclass PostsAdapter(private val context: Context) :    androidx.recyclerview.widget.ListAdapter<Posts, PostsAdapter.PostsViewHolder>(Comparator) {    var whenLikeIconClicked: ((Posts) -> Unit)? = null    private var userDataInfo: UserDataInfo? = null    inner class PostsViewHolder(val binding: PostsRecyclerBinding) :        RecyclerView.ViewHolder(binding.root) {        fun bind(posts: Posts) {            if (posts.postPhoto != "null" && posts.caption.isNotEmpty()) {                Log.d(TAG, "bind: $")                binding.postsLayout.visibility = View.VISIBLE                binding.postsLayoutWithOutPhoto.visibility = View.GONE                binding.postsLayoutWithOutCaption.visibility = View.GONE                Glide.with(binding.currentUserIv.context)                    .load(posts.userWhoCreateThePost?.profilePhoto)                    .apply(RequestOptions().dontTransform())                    .into(binding.currentUserIv)                Glide.with(binding.postPhoto.context)                    .load(posts.postPhoto)                    .apply(RequestOptions().dontTransform())                    .into(binding.postPhoto)                binding.currentUserName.text = posts.userWhoCreateThePost?.name                binding.postCaption.text = posts.caption            } else if (posts.caption.isEmpty() && posts.postPhoto != "null") {                Log.d(TAG, "bind: $$")                binding.postsLayoutWithOutCaption.visibility = View.VISIBLE                binding.postsLayoutWithOutPhoto.visibility = View.GONE                binding.postsLayout.visibility = View.GONE                binding.currentUserNameWithOutCaption.text = posts.userWhoCreateThePost?.name                Glide.with(binding.currentUserIvWithOutCaption.context)                    .load(posts.userWhoCreateThePost?.profilePhoto)                    .apply(RequestOptions().dontTransform())                    .into(binding.currentUserIvWithOutCaption)                Glide.with(binding.postPhotoWithOutCaption.context)                    .load(posts.postPhoto)                    .apply(RequestOptions().dontTransform())                    .into(binding.postPhotoWithOutCaption)            } else if (posts.caption.isNotEmpty() && posts.postPhoto == "null") {                Log.d(TAG, "bind: $$$")                binding.postsLayoutWithOutPhoto.visibility = View.VISIBLE                binding.postsLayout.visibility = View.GONE                binding.postsLayoutWithOutCaption.visibility = View.GONE                binding.currentUserNameWithOutPhoto.text = posts.userWhoCreateThePost?.name                binding.postCaptionWithOutPhoto.text = posts.caption                Glide.with(binding.currentUserIvWithOutPhoto.context)                    .load(posts.userWhoCreateThePost?.profilePhoto)                    .apply(RequestOptions().dontTransform())                    .into(binding.currentUserIvWithOutPhoto)            } else {                Log.d(TAG, "bind: $$$$")                binding.postsLayout.visibility = View.GONE                binding.postsLayoutWithOutPhoto.visibility = View.GONE                binding.postsLayoutWithOutCaption.visibility = View.GONE            }            binding.likeImg.setOnClickListener {                binding.likeImg.setColorFilter(context.resources.getColor(R.color.red))                whenLikeIconClicked?.invoke(posts)            }            binding.likeImgWithOutPhoto.setOnClickListener {                binding.likeImgWithOutPhoto.setColorFilter(context.resources.getColor(R.color.red))                whenLikeIconClicked?.invoke(posts)            }            binding.likeImgWithOutCaption.setOnClickListener {                binding.likeImgWithOutCaption.setColorFilter(context.resources.getColor(R.color.red))                whenLikeIconClicked?.invoke(posts)            }            if (posts.likes != null) {                binding.likeNum.visibility = View.VISIBLE                binding.likeNumWithOutPhoto.visibility = View.VISIBLE                binding.likeNumWithOutCaption.visibility = View.VISIBLE                binding.whoLikes.visibility = View.VISIBLE                binding.whoLikesWithOutPhoto.visibility = View.VISIBLE                binding.whoLikesWithOutCaption.visibility = View.VISIBLE                if (posts.likes.contains(userDataInfo)) {                    binding.likeImg.setColorFilter(context.resources.getColor(R.color.red))                    binding.likeImgWithOutPhoto.setColorFilter(context.resources.getColor(R.color.red))                    binding.likeImgWithOutCaption.setColorFilter(context.resources.getColor(R.color.red))                }                binding.whoLikes.text =                    context.resources.getString(                        R.string.postsLikesCount,                        posts.likes[0]?.name,                        posts.likes.size                    )                binding.whoLikesWithOutPhoto.text =                    context.resources.getString(                        R.string.postsLikesCount,                        posts.likes[0]?.name,                        posts.likes.size                    )                binding.whoLikesWithOutCaption.text =                    context.resources.getString(                        R.string.postsLikesCount,                        posts.likes[0]?.name,                        posts.likes.size                    )                binding.likeNum.text =                    context.resources.getString(R.string.numLikes, posts.likes.size)                binding.likeNumWithOutPhoto.text =                    context.resources.getString(R.string.numLikes, posts.likes.size)                binding.likeNumWithOutCaption.text =                    context.resources.getString(R.string.numLikes, posts.likes.size)            } else {//                binding.likeNum.text =//                    context.resources.getString(R.string.numLikes, 0)//                binding.likeNumWithOutPhoto.text =//                    context.resources.getString(R.string.numLikes, 0)//                binding.likeNumWithOutCaption.text =//                    context.resources.getString(R.string.numLikes, 0)                binding.likeNum.visibility = View.INVISIBLE                binding.likeNumWithOutPhoto.visibility = View.INVISIBLE                binding.likeNumWithOutCaption.visibility = View.INVISIBLE                binding.whoLikes.visibility = View.INVISIBLE                binding.whoLikesWithOutPhoto.visibility = View.INVISIBLE                binding.whoLikesWithOutCaption.visibility = View.INVISIBLE            }        }    }    private object Comparator : DiffUtil.ItemCallback<Posts>() {        override fun areItemsTheSame(oldItem: Posts, newItem: Posts): Boolean {            return oldItem.id == newItem.id        }        override fun areContentsTheSame(oldItem: Posts, newItem: Posts): Boolean {            return oldItem == newItem        }    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PostsViewHolder {        val binding =            PostsRecyclerBinding.inflate(LayoutInflater.from(parent.context), parent, false)        return PostsViewHolder(binding)    }    override fun onBindViewHolder(holder: PostsViewHolder, position: Int) {        val onePost = getItem(position)        onePost?.let { posts ->            holder.bind(posts = posts)        }    }    fun setCurrentUserInfoToAdapter(userDataInfo: UserDataInfo) {        this.userDataInfo = userDataInfo    }}