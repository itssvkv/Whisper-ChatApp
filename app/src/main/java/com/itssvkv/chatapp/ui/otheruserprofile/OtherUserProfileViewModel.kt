package com.itssvkv.chatapp.ui.otheruserprofileimport android.content.Contextimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.google.gson.Gsonimport com.itssvkv.chatapp.data.local.repository.FirebaseRepositoryimport com.itssvkv.chatapp.data.local.repository.SharedPrefRepositoryimport com.itssvkv.chatapp.models.Postsimport com.itssvkv.chatapp.models.UserDataInfoimport com.itssvkv.chatapp.utils.Commonimport com.itssvkv.chatapp.utils.sharedpref.SharedPrefCommonimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass OtherUserProfileViewModel @Inject constructor(    private val firebaseRepository: FirebaseRepository,    private val sharedPrefRepository: SharedPrefRepository) : ViewModel() {    private val _currentUserInfoLiveData = MutableLiveData<UserDataInfo>()    private val _otherUserInfoLiveData = MutableLiveData<UserDataInfo>()    private val _otherUserInfoFromFirestoreLiveData = MutableLiveData<UserDataInfo>()    private val followingList = mutableListOf<String?>()    private val followersList = mutableListOf<String?>()    var makeToast: ((TOASTS) -> Unit)? = null    private val _allPostsForOneUserLiveData = MutableLiveData<MutableList<Posts>>()    val allPostsForOneUserLiveData: LiveData<MutableList<Posts>>        get() = _allPostsForOneUserLiveData    private val _numberOfPostsLiveData = MutableLiveData<Int>()    init {        getCurrentUserInfoFromFirestore()        getAllPostsForOneUser()        _numberOfPostsLiveData.postValue(_allPostsForOneUserLiveData.value?.size)    }    fun getOtherUserInfo(userInfo: UserDataInfo) {        _otherUserInfoLiveData.postValue(userInfo)    }    private fun getCurrentUserInfoFromFirestore() {        viewModelScope.launch {            firebaseRepository.currentUserDetails().get().addOnSuccessListener {                _currentUserInfoLiveData.postValue(it.toObject(UserDataInfo::class.java))            }        }    }//    private fun getOtherUserInfoFromFirestore() {//        viewModelScope.launch {//            firebaseRepository.otherUserDetails(_otherUserInfoLiveData.value!!.id).get()//                .addOnSuccessListener {//                    _otherUserInfoFromFirestoreLiveData.postValue(it.toObject(UserDataInfo::class.java))//                }//        }//    }    fun addOnFollowingInCurrentUserInfo(userInfo: UserDataInfo, context: Context) {        followingList.add(userInfo.id)        val currentUserInfo = _currentUserInfoLiveData.value?.copy(            following = followingList        )        viewModelScope.launch {            firebaseRepository.currentUserDetails().set(currentUserInfo!!).addOnSuccessListener {                makeToast?.invoke(TOASTS.SUCCESS)                viewModelScope.launch {                    sharedPrefRepository.saveToPref(                        context = context,                        key = SharedPrefCommon.CURRENT_USER_INFO,                        value = Gson().toJson(currentUserInfo)                    )                }            }.addOnFailureListener {                makeToast?.invoke(TOASTS.FAILURE)            }        }//        getOtherUserInfoFromFirestore()    }    fun addOnFollowersInOtherUserInfo(userInfo: UserDataInfo) {        followersList.add(_currentUserInfoLiveData.value?.id)        val otherUserInfo = userInfo.copy(            followers = followersList        )        viewModelScope.launch {            firebaseRepository.otherUserDetails(_otherUserInfoLiveData.value?.id)                .set(otherUserInfo).addOnSuccessListener {                    makeToast?.invoke(TOASTS.SUCCESS)                }.addOnFailureListener {                    makeToast?.invoke(TOASTS.FAILURE)                }        }    }    private fun getAllPostsForOneUser() {        viewModelScope.launch {            firebaseRepository.getAllPostForOneUser(_otherUserInfoLiveData.value?.id)                .addSnapshotListener { value, _ ->                    Log.d(                        Common.TAG,                        "getAllPostsForOneUser: ${value?.toObjects(Posts::class.java)}"                    )                    _allPostsForOneUserLiveData.postValue(value?.toObjects(Posts::class.java))                }        }    }    enum class TOASTS {        SUCCESS,        FAILURE    }}