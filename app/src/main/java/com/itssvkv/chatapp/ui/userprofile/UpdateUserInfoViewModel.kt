package com.itssvkv.chatapp.ui.userprofileimport android.content.Contextimport android.net.Uriimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.google.firebase.storage.StorageReferenceimport com.google.gson.Gsonimport com.itssvkv.chatapp.data.local.repository.FirebaseRepositoryimport com.itssvkv.chatapp.data.local.repository.SharedPrefRepositoryimport com.itssvkv.chatapp.models.UserDataInfoimport com.itssvkv.chatapp.utils.sharedpref.SharedPrefCommon.CURRENT_USER_INFOimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.launchimport java.util.UUIDimport javax.inject.Inject@HiltViewModelclass UpdateUserInfoViewModel @Inject constructor(    private val firebaseRepository: FirebaseRepository,    private val storageReference: StorageReference,    private val sharedPrefRepository: SharedPrefRepository) : ViewModel() {    private var _currentUserInfo: UserDataInfo? = null    private var updatedUserInfo: UserDataInfo? = null    var makeToast: ((TOASTS) -> Unit)? = null    private val _imageUriLiveData = MutableLiveData<Uri>()    init {        getCurrentUserInfo()    }    private fun getCurrentUserInfo() {        viewModelScope.launch {            firebaseRepository.currentUserDetails().get().addOnSuccessListener {                _currentUserInfo = (it.toObject(UserDataInfo::class.java))            }        }    }    fun uploadImageToFirebase(image: Uri) {        val imageRef = storageReference.child(UUID.randomUUID().toString())        imageRef.putFile(image).addOnSuccessListener {            imageRef.downloadUrl.addOnSuccessListener {                _imageUriLiveData.postValue(it)            }        }    }    fun updateCurrentUserInfo(        name: String,        userName: String,        status: String,        context: Context    ) {        updatedUserInfo = if (_imageUriLiveData.value == null) {            _currentUserInfo?.copy(                name = name,                status = status,                username = userName            )        } else {            _currentUserInfo?.copy(                name = name,                status = status,                profilePhoto = _imageUriLiveData.value.toString(),                username = userName            )        }        viewModelScope.launch {            firebaseRepository.currentUserDetails().set(updatedUserInfo!!).addOnSuccessListener {                makeToast?.invoke(TOASTS.SUCCESS)                viewModelScope.launch {                    sharedPrefRepository.saveToPref(                        context = context,                        key = CURRENT_USER_INFO,                        value = Gson().toJson(updatedUserInfo)                    )                }            }.addOnFailureListener {                makeToast?.invoke(TOASTS.FAILURE)            }        }    }    enum class TOASTS {        SUCCESS,        FAILURE    }}