package com.itssvkv.chatapp.ui.home.currentUserProfileimport android.content.Contextimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.google.gson.Gsonimport com.itssvkv.chatapp.data.local.repository.FirebaseRepositoryimport com.itssvkv.chatapp.data.local.repository.SharedPrefRepositoryimport com.itssvkv.chatapp.models.Postsimport com.itssvkv.chatapp.models.UserDataInfoimport com.itssvkv.chatapp.utils.Common.TAGimport com.itssvkv.chatapp.utils.sharedpref.SharedPrefCommon.CURRENT_USER_INFOimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass MyProfileViewModel @Inject constructor(    private val sharedPrefRepository: SharedPrefRepository,    private val firebaseRepository: FirebaseRepository) : ViewModel() {    private val _currentUserDataInfo = MutableLiveData<UserDataInfo>()    val currentUserDataInfo: LiveData<UserDataInfo>        get() = _currentUserDataInfo    private val _allPostsForOneUserLiveData = MutableLiveData<MutableList<Posts>>()    val allPostsForOneUserLiveData : LiveData<MutableList<Posts>>        get() = _allPostsForOneUserLiveData    init {        getAllPostsForOneUser()    }    fun getCurrentUserFromSharedPref(context: Context) {        viewModelScope.launch {            val currentUserInfo = sharedPrefRepository.getFromPref(                context = context,                key = CURRENT_USER_INFO,                defValue = ""            ) as String            _currentUserDataInfo.postValue(                Gson().fromJson(                    currentUserInfo,                    UserDataInfo::class.java                )            )        }    }    private fun getAllPostsForOneUser(){        viewModelScope.launch {            firebaseRepository.getAllPostForOneUser().addSnapshotListener { value, _ ->                Log.d(TAG, "getAllPostsForOneUser: ${value?.toObjects(Posts::class.java)}")                _allPostsForOneUserLiveData.postValue(value?.toObjects(Posts::class.java))            }        }    }}