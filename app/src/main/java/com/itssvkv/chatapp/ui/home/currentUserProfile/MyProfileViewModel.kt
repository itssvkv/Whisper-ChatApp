package com.itssvkv.chatapp.ui.home.currentUserProfileimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.itssvkv.chatapp.data.local.repository.FirebaseRepositoryimport com.itssvkv.chatapp.data.local.repository.SharedPrefRepositoryimport com.itssvkv.chatapp.models.Postsimport com.itssvkv.chatapp.models.UserDataInfoimport com.itssvkv.chatapp.utils.Common.TAGimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.launchimport javax.inject.Injectimport kotlin.math.log@HiltViewModelclass MyProfileViewModel @Inject constructor(    private val sharedPrefRepository: SharedPrefRepository,    private val firebaseRepository: FirebaseRepository) : ViewModel() {    private val _currentUserDataInfo = MutableLiveData<UserDataInfo>()    val currentUserDataInfo: LiveData<UserDataInfo>        get() = _currentUserDataInfo    private val _allPostsForOneUserLiveData = MutableLiveData<MutableList<Posts>>()    val allPostsForOneUserLiveData: LiveData<MutableList<Posts>>        get() = _allPostsForOneUserLiveData    private val _numberOfPostsLiveData = MutableLiveData<Int>()    val numberOfPostsLiveData: LiveData<Int>        get() = _numberOfPostsLiveData    init {        getCurrentUserInfoFromFirestore()        getAllPostsForOneUser()        _numberOfPostsLiveData.postValue(_allPostsForOneUserLiveData.value?.size)    }//    fun getCurrentUserFromSharedPref(context: Context) {//        viewModelScope.launch {//            val currentUserInfo = sharedPrefRepository.getFromPref(//                context = context,//                key = CURRENT_USER_INFO,//                defValue = ""//            ) as String//            _currentUserDataInfo.postValue(//                Gson().fromJson(//                    currentUserInfo,//                    UserDataInfo::class.java//                )//            )//        }//    }    private fun getCurrentUserInfoFromFirestore() {        viewModelScope.launch {            firebaseRepository.currentUserDetails().get().addOnSuccessListener {                _currentUserDataInfo.postValue(it.toObject(UserDataInfo::class.java))                Log.d(TAG, "getCurrentUserInfoFromFirestore: ${_currentUserDataInfo.value}")            }        }    }    private fun getAllPostsForOneUser() {        viewModelScope.launch {            firebaseRepository.getAllPostForOneUser(firebaseRepository.currentUserId())                .addSnapshotListener { value, _ ->                    Log.d(TAG, "getAllPostsForOneUser: ${value?.toObjects(Posts::class.java)}")                    _allPostsForOneUserLiveData.postValue(value?.toObjects(Posts::class.java))                }        }    }}