package com.itssvkv.chatapp.bottomsheetsimport android.app.Activityimport android.content.Intentimport android.net.Uriimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.activity.result.ActivityResultLauncherimport androidx.activity.result.contract.ActivityResultContractsimport androidx.fragment.app.viewModelsimport androidx.lifecycle.lifecycleScopeimport com.google.android.material.bottomsheet.BottomSheetDialogFragmentimport com.google.firebase.Timestampimport com.itssvkv.chatapp.Rimport com.itssvkv.chatapp.data.local.repository.FirebaseRepositoryimport com.itssvkv.chatapp.databinding.CreateUserBottomSheetBindingimport com.itssvkv.chatapp.models.UserDataInfoimport com.itssvkv.chatapp.ui.MainActivityimport com.itssvkv.chatapp.utils.Common.TAGimport dagger.hilt.android.AndroidEntryPointimport kotlinx.coroutines.launchimport javax.inject.Inject@AndroidEntryPointclass CreateUserBottomSheet : BottomSheetDialogFragment() {    private var binding: CreateUserBottomSheetBinding? = null    private var imgResult: Uri? = null    private var downloadImage: Uri? = null    private var phoneNumber: String? = null    private var resultLauncher: ActivityResultLauncher<Intent>? = null    private val createUserViewModel by viewModels<CreateUserSheetViewModel>()    private val imgIntent by lazy { Intent() }    var goToNextFragment: (() -> Unit)? = null    private var userId: String = ""    @Inject    lateinit var firebaseRepo: FirebaseRepository    @Inject    lateinit var bundle: Bundle    private lateinit var userInfo: UserDataInfo    init {        setStyle(STYLE_NORMAL, R.style.AppBottomSheetDialogTheme)    }    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        binding = CreateUserBottomSheetBinding.inflate(inflater, container, false)        binding?.progressBar?.visibility = View.GONE        phoneNumber = bundle.getString("phone")        return binding?.root    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        initClicks()        initImagesClicks()        selectImage()        setInProgress()    }    private fun initClicks() {        binding?.createBtn?.setOnClickListener {            lifecycleScope.launch {                userId = createUserViewModel.getUserId()!!                Log.d(TAG, "initClicks: f${(activity as MainActivity).currentUserId}")                (activity as MainActivity).currentUserId = userId                Log.d(TAG, "initClicks: s${(activity as MainActivity).currentUserId}")                userInfo = UserDataInfo(                    name = binding?.createNameEt?.text?.toString()!!,                    status = binding?.createAboutYouEt?.text?.toString()!!,                    phone = phoneNumber,                    timestamp = Timestamp.now(),                    profilePhoto = downloadImage.toString(),                    userId = userId                )                Log.d(TAG, "initClicks: $userInfo")                createUserViewModel.setDataToFirebase(                    context = requireContext(),                    userInfo = userInfo                )                createUserViewModel.dismissBottomSheet = {                    this@CreateUserBottomSheet.dismiss()                }                createUserViewModel.goToNextFragment = {                    goToNextFragment?.invoke()                }            }        }    }    private fun setInProgress() {        createUserViewModel.setInProgress.observe(viewLifecycleOwner) {            when (it) {                true -> binding?.progressBar?.visibility = View.VISIBLE                false -> binding?.progressBar?.visibility = View.GONE            }        }    }    private fun initImagesClicks() {        binding?.profileIV?.setOnClickListener {            resultLauncher?.launch(imgIntent)        }    }    private fun selectImage() {        imgIntent.apply {            action = Intent.ACTION_GET_CONTENT            type = "image/*"        }        resultLauncher =            registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { intentResult ->                if (intentResult.resultCode == Activity.RESULT_OK) {                    imgResult = intentResult.data?.data                    binding?.profileIV?.apply {                        setImageURI(imgResult)                        Log.d(TAG, "selectImage: $imgResult")                        uploadImage(imgResult)                    }                }            }    }    private fun uploadImage(imageUri: Uri?) {        lifecycleScope.launch {            createUserViewModel.uploadImage(imageUri = imageUri!!)        }        createUserViewModel.imageUriLiveData.observe(viewLifecycleOwner) {            downloadImage = it        }        Log.d(TAG, "uploadImageActivity: $downloadImage")    }}